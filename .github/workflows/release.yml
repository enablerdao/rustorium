name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: false
        default: ''

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## Installation
            ```bash
            curl -sSf https://raw.githubusercontent.com/enablerdao/rustorium/main/scripts/install.sh | bash
            ```

            ## Features
            - Auto-detection of interactive environment
            - 10-second countdown with keyboard/mouse input detection
            - Automatic background mode
            - Pre-built binaries for multiple platforms

  build-release:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rustorium-linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rustorium-darwin-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rustorium-darwin-aarch64.tar.gz

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rustorium-${{ matrix.target }}"

      - name: Build binary
        env:
          RUSTC_WRAPPER: sccache
          SCCACHE_GHA_ENABLED: "true"
          RUSTFLAGS: ${{ matrix.target == 'aarch64-apple-darwin' && '-C target-cpu=apple-m1' || '-C target-cpu=native' }}
          MACOSX_DEPLOYMENT_TARGET: "11.0"
        run: |
          # M1/M2 Mac向けの最適化
          if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ]; then
            rustup target add aarch64-apple-darwin
            # Apple Silicon向けの最適化フラグを追加
            export RUSTFLAGS="$RUSTFLAGS -C link-arg=-undefined -C link-arg=dynamic_lookup"
          fi

          # rocksdbのクロスコンパイル設定
          if [ "${{ matrix.target }}" = "aarch64-apple-darwin" ] && [ "${{ runner.os }}" = "macOS" ]; then
            export ROCKSDB_STATIC=1
            export ROCKSDB_LIB_DIR=/opt/homebrew/lib
            export ROCKSDB_INCLUDE_DIR=/opt/homebrew/include
          fi

          cargo build --profile fast --target ${{ matrix.target }} --features bundled-rocksdb

      - name: Create tarball
        run: |
          tar czf ${{ matrix.artifact_name }} -C target/${{ matrix.target }}/fast rustorium

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/gzip

  update-latest:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Update latest tag
        run: |
          git tag -f latest
          git push -f origin latest